#+BEGIN_SRC emacs-lisp
; template
#+END_SRC

* ideas Sources
** https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org


* custom variables
#+BEGIN_SRC emacs-lisp

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector ["#2d3743" "#ff4242" "#74af68" "#dbdb95" "#34cae2" "#008b8b" "#00ede1" "#e1e1e0"])
 '(custom-enabled-themes (quote (deeper-blue)))
 '(org-agenda-files (quote ("~/Documents/org/gtd.org"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(prefer-coding-system 'utf-8)
#+END_SRC


* package
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                         ("org" . "http://orgmode.org/elpa/")
                         ("gnu" . "http://elpa.gnu.org/packages/"))) 
;(package-refresh-contents)
#+END_SRC


* look and feel
** Custom solarized-light theme
#+BEGIN_SRC emacs-lisp
(when window-system
  (setq solarized-use-variable-pitch nil)
  (setq solarized-height-plus-1 1.0)
  (setq solarized-height-plus-2 1.0)
  (setq solarized-height-plus-3 1.0)
  (setq solarized-height-plus-4 1.0)
  (setq solarized-high-contrast-mode-line t)
  (load-theme 'solarized-light t))
#+END_SRC


** Disable scrollbar
#+BEGIN_SRC emacs-lisp
(toggle-scroll-bar -1)
#+END_SRC


** Disable toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC


** Highlight the current line
#+BEGIN_SRC emacs-lisp

(when window-system
  (global-hl-line-mode))

(defun disable-hl-line-mode ()
   "disable current line hightligting"
   (setq-local global-hl-line-mode nil))

#+END_SRC


** Set default font and configure font resizing
#+BEGIN_SRC emacs-lisp
;(setq hrs/default-font "Inconsolata")
(setq hrs/default-font "Ubuntu Mono")
(setq hrs/default-font-size 12)
(setq hrs/current-font-size hrs/default-font-size)

(defun hrs/set-font-size ()
  "Set the font to `hrs/default-font' at `hrs/current-font-size'."
  (set-frame-font
   (concat hrs/default-font "-" (number-to-string hrs/current-font-size))))

(defun hrs/reset-font-size ()
  "Change font size back to `hrs/default-font-size'."
  (interactive)
  (setq hrs/current-font-size hrs/default-font-size)
  (hrs/set-font-size))

(defun hrs/increase-font-size ()
  "Increase current font size by a factor of `hrs/font-change-increment'."
  (interactive)
  (setq hrs/current-font-size
        (ceiling (* hrs/current-font-size hrs/font-change-increment)))
  (hrs/set-font-size))

(defun hrs/decrease-font-size ()
  "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
  (interactive)
  (setq hrs/current-font-size
        (max 1
             (floor (/ hrs/current-font-size hrs/font-change-increment))))
  (hrs/set-font-size))

(define-key global-map (kbd "C-)") 'hrs/reset-font-size)
(define-key global-map (kbd "C-+") 'hrs/increase-font-size)
(define-key global-map (kbd "C-=") 'hrs/increase-font-size)
(define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
(define-key global-map (kbd "C--") 'hrs/decrease-font-size)
(hrs/reset-font-size)
#+END_SRC


* evil-mode
Use evil
#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
#+END_SRC


** Relatative line numbers
#+BEGIN_SRC emacs-lisp
(require 'linum-relative)
(linum-mode)
#+END_SRC 


** Powerline
#+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-default-theme)
#+END_SRC 


* org mode 
#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () 
   (org-bullets-mode 1)
   (limum-relative-off)))

(setq org-ellipsis "â¤µ")
(define-key global-map "\C-ca" 'org-agenda)
(require 'powerline)
(require 'powerline-evil)
#+END_SRC


** Commit org-mode files on save
#+BEGIN_SRC emacs-lisp
(defun org-sync ()
   "Fix changes in commit"
   (when (eq major-mode 'org-mode)
      (shell-command "./sync.sh commit")))

(add-hook 'after-save-hook #'org-sync)
#+END_SRC


* CEDET mode
#+BEGIN_SRC emacs-lisp
(semantic-mode 1)

(global-ede-mode 1)
(global-semantic-idle-scheduler-mode 1)
#+END_SRC


* Terminal
*** Use a login shell
#+BEGIN_SRC emacs-lisp
(setq multi-term-program-switches "--login")
#+END_SRC


*** Disable highliting current line
#+BEGIN_SRC emacs-lisp

(add-hook 'term-mode-hook #'disable-hl-line-mode)
(add-hook 'eshell-mode-hook #'disable-hl-line-mode)

#+END_SRC


*** Disable Evil in terminal.
#+BEGIN_SRC emacs-lisp
;(evil-set-initial-state 'term-mode 'emacs)
#+END_SRC


* Programming
** Racket
https://github.com/greghendershott/racket-mode
#+BEGIN_SRC emacs-lisp
;(require 'racket-mode)
#+END_SRC


** C\C++
How to make C++ ide in emacs
http://tuhdo.github.io/c-ide.html

*** Indents
#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 3
              indent-tabs-mode nil)
#+END_SRC


*** Style
#+BEGIN_SRC emacs-lisp
(setq-default c-default-style "linux")
#+END_SRC


*** Source code navigation using RTags
I copy this configuration from here http://syamajala.github.io/c-ide.html

rtags https://github.com/Andersbakken/rtags

#+BEGIN_SRC emacs-lisp
(require 'rtags)

(add-hook 'c-mode-hook 'rtags-start-process-unless-running)
(add-hook 'c++-mode-hook 'rtags-start-process-unless-running)

(setq rtags-autostart-diagnostics t)
(rtags-enable-standard-keybindings)
#+END_SRC

*** rtags key bindings
#+BEGIN_SRC emacs-lisp
(define-key c++-mode-map [(M-left)] 'rtags-location-stack-back)
(define-key c-mode-map [(M-left)] 'rtags-location-stack-back)
(define-key c++-mode-map [(M-right)] 'rtags-location-stack-forward)
(define-key c-mode-map [(M-right)] 'rtags-location-stack-forward)
#+END_SRC


*** start rdm process
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook 'rtags-start-process-unless-running)
(add-hook 'c++-mode-hook 'rtags-start-process-unless-running)
#+END_SRC



*** competition
#+BEGIN_SRC emacs-lisp
(require 'company)
(require 'company-rtags)
(add-hook 'after-init-hook 'global-company-mode)

(setq rtags-completions-enabled t)

(eval-after-load 'company
  '(add-to-list
    'company-backends 'company-rtags))

(setq company-idle-delay 0)
(define-key c-mode-map [(tab)] 'company-complete)
(define-key c++-mode-map [(tab)] 'company-complete)
#+END_SRC

*** enable helm intergration
#+BEGIN_SRC emacs-lisp
(require 'helm-rtags)
(setq rtags-use-helm t)
#+END_SRC

*** Syntax checking
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c-mode-hook 'flycheck-mode)
(require 'flycheck-rtags)

(defun my-flycheck-rtags-setup ()
  (flycheck-select-checker 'rtags)
  (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
  (setq-local flycheck-check-syntax-automatically nil))
;; c-mode-common-hook is also called by c++-mode
(add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)
#+END_SRC


* Experimental
** Switching buffers
#+BEGIN_SRC emacs-lisp
  (require 'ido)
  ;; make buffer switch command do suggestions, also for find-file command
  (ido-mode 1)
  ;; (ido-everywhere 1)
  (if ; make ido display choices vertically
      (version< emacs-version "25")
      (progn
        (make-local-variable 'ido-separator)
        (setq ido-separator "\n"))
    (progn
      (make-local-variable 'ido-decorations)
      (setf (nth 2 ido-decorations) "\n")))
  (setq ido-enable-flex-matching t) ; show any name that has the chars you typed
  (setq ido-default-file-method 'selected-window) ; use current pane for newly opened file
  (setq ido-default-buffer-method 'selected-window) ; use current pane for newly switched buffer
  (define-key (cdr ido-minor-mode-map-entry) [remap write-file] nil) ; stop ido from suggesting when naming new file
#+END_SRC


* git
https://github.com/magit/magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
#+END_SRC
