#+BEGIN_SRC emacs-lisp
; template
#+END_SRC

* ideas Sources
** https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org

* custom variables
#+BEGIN_SRC emacs-lisp

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector ["#2d3743" "#ff4242" "#74af68" "#dbdb95" "#34cae2" "#008b8b" "#00ede1" "#e1e1e0"])
 '(custom-enabled-themes (quote (deeper-blue)))
 '(org-agenda-files (quote ("~/Documents/org/gtd.org"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(prefer-coding-system 'utf-8)
#+END_SRC

* package
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                         ("org" . "http://orgmode.org/elpa/")
                         ("gnu" . "http://elpa.gnu.org/packages/"))) 
;(package-refresh-contents)
#+END_SRC

* look and feel
** Custom solarized-light theme
#+BEGIN_SRC emacs-lisp
(when window-system
  (setq solarized-use-variable-pitch nil)
  (setq solarized-height-plus-1 1.0)
  (setq solarized-height-plus-2 1.0)
  (setq solarized-height-plus-3 1.0)
  (setq solarized-height-plus-4 1.0)
  (setq solarized-high-contrast-mode-line t)
  (load-theme 'solarized-light t))
#+END_SRC


** Disable scrollbar
#+BEGIN_SRC emacs-lisp
(when window-system
  (toggle-scroll-bar -1))
#+END_SRC


** Disable toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC


** Highlight the current line
#+BEGIN_SRC emacs-lisp

(when window-system
  (global-hl-line-mode))

(defun disable-hl-line-mode ()
   "disable current line hightligting"
   (setq-local global-hl-line-mode nil))

#+END_SRC


** powerline
#+BEGIN_SRC emacs-lisp
(require 'powerline)
(require 'powerline-evil)
#+END_SRC 


** Set default font and configure font resizing
#+BEGIN_SRC emacs-lisp
;(setq hrs/default-font "Inconsolata")
(setq hrs/default-font "Ubuntu Mono")
(setq hrs/default-font-size 12)
(setq hrs/current-font-size hrs/default-font-size)
(setq hrs/font-change-increment 1.05)

(defun hrs/set-font-size ()
  "Set the font to `hrs/default-font' at `hrs/current-font-size'."
  (set-frame-font
   (concat hrs/default-font "-" (number-to-string hrs/current-font-size))))

(defun hrs/reset-font-size ()
  "Change font size back to `hrs/default-font-size'."
  (interactive)
  (setq hrs/current-font-size hrs/default-font-size)
  (hrs/set-font-size))

(defun hrs/increase-font-size ()
  "Increase current font size by a factor of `hrs/font-change-increment'."
  (interactive)
  (setq hrs/current-font-size
        (ceiling (* hrs/current-font-size hrs/font-change-increment)))
  (hrs/set-font-size))

(defun hrs/decrease-font-size ()
  "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
  (interactive)
  (setq hrs/current-font-size
        (max 1
             (floor (/ hrs/current-font-size hrs/font-change-increment))))
  (hrs/set-font-size))

(define-key global-map (kbd "C-)") 'hrs/reset-font-size)
(define-key global-map (kbd "C-+") 'hrs/increase-font-size)
(define-key global-map (kbd "C-=") 'hrs/increase-font-size)
(define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
(define-key global-map (kbd "C--") 'hrs/decrease-font-size)
(hrs/reset-font-size)
#+END_SRC

** Disable startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
#+END_SRC

* evil-mode
Use evil
#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
#+END_SRC


** Relatative line numbers
#+BEGIN_SRC emacs-lisp
(require 'linum-relative)
(linum-mode)
#+END_SRC 


** Powerline
#+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-default-theme)
#+END_SRC 

* org mode 
#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () 
   (org-bullets-mode 1)
))

(setq org-ellipsis "â¤µ")
(define-key global-map "\C-ca" 'org-agenda)
#+END_SRC


** Commit org-mode files on save
#+BEGIN_SRC emacs-lisp
(defun org-sync ()
   "Fix changes in commit"
   (when (eq major-mode 'org-mode)
      (shell-command "./sync.sh commit")))

(add-hook 'after-save-hook #'org-sync)
#+END_SRC

** Pomodoro Technique 
#+BEGIN_SRC emacs-lisp
(setq org-pomodoro-length 20)
(define-key global-map "\C-cpom" 'org-pomodoro)
#+END_SRC
** Notification
#+BEGIN_SRC emacs-lisp
(require 'org-alert)
;(org-alert-enable)
(setq alert-default-style 'libnotify)
#+END_SRC


** Capture
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture)
(setq org-capture-templates
      '(("i" "Inbox" entry (file+headline "~/Documents/org/gtd.org" "Inbox")
             "* TODO %?\nEntered on %U\n")
        ("n" "Note" entry (file "~/Documents/org/notes.org")
             "* %?\nEntered on %U\n")))
#+END_SRC
** Projects
#+BEGIN_SRC emacs-lisp
(defun my-find-project-references ()
"Find all references to current project"
  (interactive)
  (let ((query (concat "PARENT={." (org-id-copy) ".}")))
    (org-tags-view "S" query)))
#+END_SRC
* CEDET mode
#+BEGIN_SRC emacs-lisp
(semantic-mode 1)

(global-ede-mode 1)
(global-semantic-idle-scheduler-mode 1)
#+END_SRC

* Terminal
*** Use a login shell
#+BEGIN_SRC emacs-lisp
(setq multi-term-program-switches "--login")
#+END_SRC


*** Disable highliting current line
#+BEGIN_SRC emacs-lisp

(add-hook 'term-mode-hook #'disable-hl-line-mode)
(add-hook 'eshell-mode-hook #'disable-hl-line-mode)

#+END_SRC


*** Disable Evil in terminal.
#+BEGIN_SRC emacs-lisp
;(evil-set-initial-state 'term-mode 'emacs)
#+END_SRC

* Programming
** Literate Programming
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (emacs-lisp . nil)
   ))
#+END_SRC
* Experimental
** Switching buffers
#+BEGIN_SRC emacs-lisp
  (require 'ido)
  ;; make buffer switch command do suggestions, also for find-file command
  (ido-mode 1)
  ;; (ido-everywhere 1)
  (if ; make ido display choices vertically
      (version< emacs-version "25")
      (progn
        (make-local-variable 'ido-separator)
        (setq ido-separator "\n"))
    (progn
      (make-local-variable 'ido-decorations)
      (setf (nth 2 ido-decorations) "\n")))
  (setq ido-enable-flex-matching t) ; show any name that has the chars you typed
  (setq ido-default-file-method 'selected-window) ; use current pane for newly opened file
  (setq ido-default-buffer-method 'selected-window) ; use current pane for newly switched buffer
  (define-key (cdr ido-minor-mode-map-entry) [remap write-file] nil) ; stop ido from suggesting when naming new file

  (define-key global-map (kbd "M-f") 'ido-find-file)
  (define-key global-map (kbd "M-b") 'ido-switch-buffer)
  (define-key global-map (kbd "M-d") 'ido-dired)

#+END_SRC

* git
https://github.com/magit/magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
#+END_SRC
* M-x mode
#+BEGIN_SRC emacs-lisp
  (require 'smex) ; Not needed if you use package.el

  (smex-initialize) ; Can be omitted. This might cause a (minimal) delay
                    ; when Smex is auto-initialized on its first run.

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC
* autocomplition
#+BEGIN_SRC emacs-lisp
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(setq company-idle-delay 0)
#+END_SRC
